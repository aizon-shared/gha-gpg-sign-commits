name: "GPG Sign Commits"
author: "Aizon.ai"
description: "Install and configure GPG and Git to be able to sign commit using Github Actions runners"

inputs:
  gpgPrivateKey:
    description: "The private key to import"
    required: true
  gpgPublicKey:
    description: "The public key to import"
    required: false
  privateKeyPassphrase:
    description: "The passphrase of the private key"
    required: false
  gitSignCommits:
    description: |-
      Enable git configurations to sign commits with the imported key.

      This will override any existing git configurations for:
      - user.email
      - user.name
      - user.signingkey
      - commit.gpgsign
      - gpg.program

      Name and email will be set to the values of the imported key.
    default: true
    required: false
  debug:
    description: "Enable debug mode"
    default: false
    required: false

outputs:
  gpg-version:
    description: "GPG used version"
    value: ${{ steps.install.outputs.gpg-version }}
  gpg-fingerprint:
    description: "GPG key fingerprint shot format"
    value: ${{ steps.export-gpg-details.outputs.gpg-fingerprint }}
  gpg-fingerprint-long:
    description: "GPG key fingerprint long format"
    value: ${{ steps.export-gpg-details.outputs.gpg-fingerprint-long }}
  gpg-email:
    description: "GPG key email"
    value: ${{ steps.export-gpg-details.outputs.gpg-email }}
  gpg-name:
    description: "GPG key name"
    value: ${{ steps.export-gpg-details.outputs.gpg-name }}
  git-user-email:
    description: "Git user email"
    value: ${{ steps.setup-git.outputs.git-user-email }}
  git-user-name:
    description: "Git user name"
    value: ${{ steps.setup-git.outputs.git-user-name }}
  git-user-signingkey:
    description: "Git user signing key"
    value: ${{ steps.setup-git.outputs.git-user-signingkey }}
  git-commit-gpgsign:
    description: "Git commit gpgsign"
    value: ${{ steps.setup-git.outputs.git-commit-gpgsign }}
  git-gpg-program:
    description: "Git gpg program"
    value: ${{ steps.setup-git.outputs.git-gpg-program }}

runs:
  using: "composite"
  steps:
    - name: "Install GPG"
      id: install
      shell: bash
      run: |
        sudo apt-get install gnupg gnupg2 gnupg-agent -y
        echo "gpg-version=$(gpg --version | head -n 1 | awk '{print $3}')" >> "$GITHUB_OUTPUT"

    - name: "Setup GPG"
      id: setup-gpg
      shell: bash
      run: |
        mkdir ~/.gnupg
        chmod 700 ~/.gnupg

        touch ~/.gnupg/gpg-agent.conf
        echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
        echo "default-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
        echo "max-cache-ttl 7200" >> ~/.gnupg/gpg-agent.conf
        chmod 600 ~/.gnupg/gpg-agent.conf

        touch ~/.gnupg/gpg.conf
        echo "batch" >> ~/.gnupg/gpg.conf
        echo "no-tty" >> ~/.gnupg/gpg.conf
        echo "trust-model always" >> ~/.gnupg/gpg.conf
        echo "yes" >> ~/.gnupg/gpg.conf
        chmod 600 ~/.gnupg/gpg.conf

        gpg-connect-agent reloadagent /bye

    - name: "Import private key with passphrase"
      shell: bash
      run: |
        echo -e "${{ inputs.gpgPrivateKey }}" | gpg --import --allow-secret-key --batch --yes

    - name: "Import public key"
      if: ${{ inputs.gpgPublicKey != '' }}
      shell: bash
      run: |
        echo -e "${{ inputs.gpgPublicKey }}" | gpg --import --allow-secret-key --batch --yes

    - name: "Listing gpg keys"
      shell: bash
      run: |
        gpg --list-secret-keys --keyid-format LONG

    - name: "Listing gpg keyinfo"
      shell: bash
      run: |
        gpg-connect-agent -q 'keyinfo --list' /bye

    - name: "Export GPG key details"
      id: export-gpg-details
      shell: bash
      run: |
        echo "gpg-fingerprint=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | awk -F'/' '{print $2}')" >> "$GITHUB_OUTPUT"
        echo "gpg-fingerprint-long=$(gpg --list-secret-keys --keyid-format LONG | grep "^\s.*[a-fA-F0-9]$" | sed 's/\s//g')" >> "$GITHUB_OUTPUT"
        echo "gpg-email=$(gpg --list-secret-keys --keyid-format LONG | grep uid | sed -n -e 's/.*<\(.*\)>.*/\1/p')" >> "$GITHUB_OUTPUT"
        echo "gpg-name=$(gpg --list-secret-keys --keyid-format LONG | grep uid | sed -e 's/\[.*\]//g' | sed -e 's/(.*)//g' | awk -F'<' '{print $1}' | awk -F"d" '{print $2}' | sed 's/^ *//;s/ *$//')" >> "$GITHUB_OUTPUT"

    - name: "Setup GPG Passphrase"
      shell: bash
      run: |
        for KEY in $(pg-connect-agent -q 'keyinfo --list' /bye | awk '/KEYINFO/ { print $3 }'); do
          echo "Setting passphrase for $KEY"
          /usr/lib/gnupg2/gpg-preset-passphrase --preset --passphrase "${{ inputs.privateKeyPassphrase }}" $KEY
        done

    - name: "Setup Git"
      if: ${{ inputs.gitSignCommits == 'true' }}
      id: setup-git
      shell: bash
      run: |
        git config --global user.email "${{ steps.export-gpg-details.outputs.gpg-email }}"
        git config --global user.name "${{ steps.export-gpg-details.outputs.gpg-name }}"
        git config --global user.signingkey "${{ steps.export-gpg-details.outputs.gpg-fingerprint }}"
        git config --global commit.gpgsign true
        git config --global gpg.program $(which gpg)

        echo "git-user-email=$(git config --get user.email)" >> "$GITHUB_OUTPUT"
        echo "git-user-name=$(git config --get user.name)" >> "$GITHUB_OUTPUT"
        echo "git-user-signingkey=$(git config --get user.signingkey)" >> "$GITHUB_OUTPUT"
        echo "git-commit-gpgsign=$(git config --get commit.gpgsign)" >> "$GITHUB_OUTPUT"
        echo "git-gpg-program=$(git config --get gpg.program)" >> "$GITHUB_OUTPUT"

    - name: "Debug"
      if: ${{ inputs.debug == 'true' }}
      shell: bash
      run: |
        echo "Debug mode enabled"

        echo "Listing ~/.gnupg contents"
        ls -la ~/.gnupg

        echo "Showing ~/.gnupg/gpg.conf"
        cat ~/.gnupg/gpg.conf

        echo "Showing ~/.gnupg/gpg-agent.conf"
        cat ~/.gnupg/gpg-agent.conf

        echo "Showing ~/.gitconfig"
        cat ~/.gitconfig
